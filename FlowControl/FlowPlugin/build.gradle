apply plugin: 'groovy'

def isNotStandalone = project.parent != null
def isDebugPlugin = false

if (isNotStandalone) {
    isDebugPlugin = DEBUG_FLOW_CONTROL_APT
    apply from: rootProject.file('publish_module_config.gradle')
} else {
    Properties props = new Properties()
    props.load(rootProject.file('../gradle.properties').newDataInputStream())
    isDebugPlugin = props.getProperty('DEBUG_FLOW_CONTROL_APT')

    repositories {
        mavenLocal()
        maven {
            url uri("${rootProject.rootDir}/.repo")
        }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://dl.google.com/dl/android/maven2/' }
        jcenter()
        google()
    }
    project.ext.isPublish = project.hasProperty('publishLib')
}
println "是否非独立 ${isNotStandalone}，是否调试 ${isDebugPlugin}，是否发布 ${project.ext.isPublish}"


dependencies {
    //gradle sdk
    implementation gradleApi()
    //groovy sdk
    implementation localGroovy()

    implementation 'com.android.tools.build:gradle:4.0.0'

    compileOnly 'com.google.android:android:4.1.1.4'
}

if (isNotStandalone) {
    dependencies {
        if (Boolean.valueOf(isDebugPlugin)) {
            println "直接依赖 common 模块"
            implementation project.project(':FlowCommon')
        } else {
            println "依赖发布后 common 库"
            implementation "com.lkl.flowcontrol:FlowCommon:${project.project(':FlowCommon').POM_VERSION_NAME}"
        }
    }
} else {
    println "依赖 common 源码"
    sourceSets {
        main {
            java.srcDirs += "${project.rootDir.parent}/common/src/main/java"
        }
    }
}
